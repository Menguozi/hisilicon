diff --git a/fs/f2fs/hc.c b/fs/f2fs/hc.c
index 7a287d763..4319991bb 100644
--- a/fs/f2fs/hc.c
+++ b/fs/f2fs/hc.c
@@ -205,10 +205,23 @@ static int kmeans_thread_func(void *data)
 	struct f2fs_hc_kthread *hc_th = sbi->hc_thread;
 	wait_queue_head_t *wq = &sbi->hc_thread->hc_wait_queue_head;
 	int err;
+	unsigned int total_blocks;
+	unsigned int last_total_blocks;
+	unsigned int wait_ms;
 
 	set_freezable();
 	do {
-		wait_event_interruptible_timeout(*wq, kthread_should_stop() || freezing(current), msecs_to_jiffies(hc_th->min_sleep_time));
+		wait_ms = hc_th->min_sleep_time;
+		total_blocks = sbi->hi->new_blk_cnt + sbi->hi->upd_blk_cnt;
+
+		if (total_blocks - last_total_blocks > DEF_HC_THREAD_DELTA_BLOCKS)
+			hc_decrease_sleep_time(hc_th, &wait_ms);
+		else
+			hc_increase_sleep_time(hc_th, &wait_ms);
+
+		wait_event_interruptible_timeout(*wq, kthread_should_stop() || freezing(current), msecs_to_jiffies(wait_ms));
+		
+		last_total_blocks = sbi->hi->new_blk_cnt + sbi->hi->upd_blk_cnt;
 		err = f2fs_hc(sbi);
 		if (!err) sbi->centers_valid = 1;
 	} while (!kthread_should_stop());
diff --git a/fs/f2fs/hc.h b/fs/f2fs/hc.h
index b811276ec..2de18c2fa 100644
--- a/fs/f2fs/hc.h
+++ b/fs/f2fs/hc.h
@@ -6,11 +6,12 @@
 #include <linux/slab.h>         /* for kmalloc() */
 
 #define DEF_HC_THREAD_MIN_SLEEP_TIME	60000	/* milliseconds */
-#define DEF_HC_THREAD_MAX_SLEEP_TIME	120000
+#define DEF_HC_THREAD_MAX_SLEEP_TIME	3600000 /*    1 hour   */
 #define DEF_HC_THREAD_NOHC_SLEEP_TIME	300000	/* wait 5 min */
 
 #define DEF_HC_HOTNESS_ENTRY_SHRINK_THRESHOLD 1000000
 #define DEF_HC_HOTNESS_ENTRY_SHRINK_NUM 100000
+#define DEF_HC_THREAD_DELTA_BLOCKS		100000
 
 #define MIN(a, b) ((a) < (b)) ? a : b
 #define MAX(a, b) ((a) < (b)) ? b : a
@@ -34,5 +35,24 @@ void release_hotness_entry(struct f2fs_sb_info *sbi);
 
 int hotness_decide(struct f2fs_io_info *fio, int *type_old_ptr, __u64 *value_ptr);
 void hotness_maintain(struct f2fs_io_info *fio, int type_old, int type_new, __u64 value);
+static inline void hc_decrease_sleep_time(struct f2fs_hc_kthread *hc_th, unsigned int *wait)
+{
+	unsigned int min_time = hc_th->min_sleep_time;
+	if ((long long)*wait - (long long)min_time < (long long)min_time)
+		*wait = min_time;
+	else
+		*wait -= min_time;
+}
+
+static inline void hc_increase_sleep_time(struct f2fs_hc_kthread *hc_th, unsigned int *wait)
+{
+	unsigned int min_time = hc_th->min_sleep_time;
+	unsigned int max_time = hc_th->max_sleep_time;
+
+	if ((long long)*wait + (long long)min_time > (long long)max_time)
+		*wait = max_time;
+	else
+		*wait += min_time;
+}
 
 #endif
